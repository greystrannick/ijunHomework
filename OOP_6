using System;
using System.Collections.Generic;

namespace IJunior_OOP_6
{
    class Program
    {
        static void Main(string[] args)
        {
            Shop shop = new Shop();
            shop.WorkShop();
        }
    }

    class Tools
    {
        public static int ValidateInt()
        {
            int result;

            while (int.TryParse(Console.ReadLine(), out result) == false)
            {
                Console.WriteLine("Необходимо ввести целое число.");
            }

            return result;
        }
    }

    class Shop
    {
        public void WorkShop()
        {
            const string ShowAllProductsCommand = "1";
            const string BuyProductCommand = "2";
            const string ShowBuyerProductCommand = "3";
            const string ExitShopCommand = "4";

            bool isWork = true;

            Buyer buyer = new Buyer(5000);
            Salesman salesman = new Salesman(10000);
            Cell cell = new Cell();
           
            salesman.InitProductList();

            while (isWork)
            {
                Console.Clear();
                Console.WriteLine("Магазин товаров 'НАЙДЕТСЯ ВСЁ!'\n");
                Console.WriteLine("\n\nМеню работы с магазином:");
                Console.WriteLine($"{ShowAllProductsCommand} - Показать весь ассортимент товаров.");
                Console.WriteLine($"{BuyProductCommand} - Купить выбранный товар.");
                Console.WriteLine($"{ShowBuyerProductCommand} - Посмотреть корзину купленных товаров.");
                Console.WriteLine($"{ExitShopCommand} - Выход.\n");
                Console.SetCursorPosition(0, 2);
                Console.Write("Кол-во денег у продавца:");
                salesman.ShowMoney();

                Console.SetCursorPosition(35, 2);
                Console.Write("Кол-во денег у покупателя:");
                buyer.ShowMoney();

                Console.SetCursorPosition(0, 9);
                Console.Write("Введите команду:\n>");
                Console.Write("   ");
                Console.SetCursorPosition(1, 10);
                string userInput = Console.ReadLine();

                switch (userInput)
                {
                    case ShowAllProductsCommand:
                        salesman.ShowProductList();
                        break;

                    case BuyProductCommand:
                        salesman.PurchaseGoods(buyer, cell);
                        break;

                    case ShowBuyerProductCommand:
                        Console.WriteLine("В вашей корзине:");
                        buyer.ShowProductList();
                        break;

                    case ExitShopCommand:
                        Console.WriteLine("До свиданья, спасибо за покупки!");
                        isWork = false;
                        break;

                    default:
                        Console.WriteLine("Такой команды нет, нажмите любую клавишу для продолжения...");
                        Console.ReadKey();
                        break;
                }

                Console.WriteLine("Нажмите любую клавишу для продолжения...");
                Console.ReadKey();
            }
        }
    }

    class Person
    {
        public List<Cell> produce = new List<Cell>();
        public Person(int money)
        {
            Money = money;
        }

        public int Money { get; private set; }

        public void Buy(int price, int quantity)
        {
            Money += price * quantity;
        }

        public void ShowMoney()
        {
            Console.WriteLine(Money);
        }

        public void ShowProductList()
        {
            if (produce.Count > 0)
            {
                Console.SetCursorPosition(1, 14);
                Console.WriteLine("\nТовары в наличии: ");
                int index = 0;

                foreach (Cell cell in produce)
                {
                    index++;
                    Console.SetCursorPosition(1, 15 + index);
                    Console.Write($"{index}.{cell.Product.Name}");
                    Console.SetCursorPosition(18, 15 + index);
                    Console.Write($"В наличии: {cell.Quantity} шт.");
                    Console.SetCursorPosition(40, 15 + index);
                    Console.Write($"Цена: {cell.Product.Price}\n");
                }
            }
            else
            {
                Console.WriteLine("\nТоваров нет!");
            }
        }
    }

    class Salesman : Person
    {
        public Salesman(int money) : base(money) { }

        public void InitProductList()
        {
            produce.Add(new Cell(new Product("Хлеб", 20), 10));
            produce.Add(new Cell(new Product("Батон", 30), 10));
            produce.Add(new Cell(new Product("Пила", 100), 5));
            produce.Add(new Cell(new Product("Зелье", 50), 10));
            produce.Add(new Cell(new Product("Меч", 500), 2));
            produce.Add(new Cell(new Product("Шлем", 300), 4));
            produce.Add(new Cell(new Product("Наручни", 250), 2));
            produce.Add(new Cell(new Product("Сапоги", 200), 4));
            produce.Add(new Cell(new Product("Кольчуга", 1000), 2));
        }

        public void PurchaseGoods(Buyer buyer, Cell cell)
        {
            ShowProductList();

            Console.SetCursorPosition(0, 11);
            Console.Write("Введите номер покупаемого товара:\n>");

            int inputGoods = Tools.ValidateInt();

            if (inputGoods > 0 && inputGoods <= produce.Count)
            {

                Console.SetCursorPosition(0, 13);
                Console.Write("  Введите количество покупаемого товара:\n>");

                int inputQuantity = Tools.ValidateInt();

                if (inputQuantity * produce[inputGoods - 1].Product.Price > buyer.Money)
                {
                    Console.SetCursorPosition(1, 26);
                    Console.WriteLine("У вас не хватает денег для покупки товара!");
                }
                else
                {
                    if (inputQuantity > produce[inputGoods - 1].Quantity)
                    {
                        Console.SetCursorPosition(1, 26);
                        Console.WriteLine("Такого количества товара нет!");
                    }
                    else
                    {
                        cell.DecreaseAmount(this, inputGoods, inputQuantity);
                        buyer.Buy(-produce[inputGoods - 1].Product.Price, inputQuantity);
                        Buy(produce[inputGoods - 1].Product.Price, inputQuantity);
                        buyer.PutBag(produce[inputGoods - 1].Product.Name, produce[inputGoods - 1].Product.Price, inputQuantity);

                        if (produce[inputGoods - 1].Quantity == 0)
                        {
                            produce.RemoveAt(inputGoods - 1);
                        }

                        ShowProductList();
                        Console.WriteLine("Спасибо, пиятно иметь дело с хорошим покупателем!!!");
                    }
                }
            }
            else
            {
                Console.SetCursorPosition(1, 26);
                Console.WriteLine("Такого товара нет!");
            }
        }
    }

    class Buyer : Person
    {
        public Buyer(int money) : base(money) { }

        public void PutBag(string name, int price, int quantity)
        {
            produce.Add(new Cell(new Product(name, price), quantity));
        }
    }

    class Product
    {
        public Product(string name, int price)
        {
            Name = name;
            Price = price;
        }

        public string Name { get; private set; }
        public int Price { get; private set; }
    }

    class Cell
    {
        public Cell()
        {
        }

        public Cell(Product product, int quantity)
        {
            Product = product;
            Quantity = quantity;
        }

        public Product Product { get; private set; }
        public int Quantity { get; private set; }

        public void DecreaseAmount(Salesman salesman, int inputGoods, int inputQuantity)
        {
            salesman.produce[inputGoods - 1].Quantity -= inputQuantity;
        }
    }
}
