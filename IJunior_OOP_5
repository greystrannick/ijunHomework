using System;
using System.Collections.Generic;

namespace IJunior_OOP_5
{
    class Program
    {
        static void Main(string[] args)
        {
            const string AddBookCommand = "1";
            const string RemoveBookCommand = "2";
            const string ShowAllBooksCommand = "3";
            const string ShowBooksAuthorCommand = "5";
            const string ShowBooksTitleCommand = "4";
            const string ShowBooksYearCommand = "6";
            const string ShowBooksGenreCommand = "7";
            const string ExitCommand = "8";

            bool isWork = true;

            Library library = new Library();

            while (isWork)
            {
                Console.SetCursorPosition(0, 0);
                Console.WriteLine($"Команды работы с библиотекой: \n\nДобавить книгу: {AddBookCommand}." +
                    $"\nУдалить книгу: {RemoveBookCommand}." +
                    $"\nПоказать всех книги: {ShowAllBooksCommand}" +
                    $"\nПоказ книг по названию: {ShowBooksTitleCommand}" +
                    $"\nПоказ книг по автору: {ShowBooksAuthorCommand}" +
                    $"\nПоказ книг по году выпуска: {ShowBooksYearCommand}" +
                    $"\nПоказ книг по жанру: {ShowBooksGenreCommand}" +
                    $"\n8Выход из репозитория: {ExitCommand}");
                Console.Write("\nВведите команду:\n>");
                string userInput = Console.ReadLine();
                Console.Clear();

                switch (userInput)
                {
                    case AddBookCommand:
                        library.AddBook();
                        break;

                    case RemoveBookCommand:
                        library.RemoveBook();
                        break;

                    case ShowAllBooksCommand:
                        library.ShowAllBooks();
                        break;

                    case ShowBooksTitleCommand:
                        library.SearchBookTitle();
                        break;

                    case ShowBooksAuthorCommand:
                        library.SearchBookAuthor();
                        break;

                    case ShowBooksYearCommand:
                        library.SearchBookYear();
                        break;

                    case ShowBooksGenreCommand:
                        library.SearchBookGenre();
                        break;

                    case ExitCommand:
                        isWork = false;
                        Console.WriteLine("\nДля продолжениия нажмите кнопку...");
                        break;

                    default:
                        Console.SetCursorPosition(1, 14);
                        Console.WriteLine("\nДанной команды не существует!");
                        break;
                }
            }
        }
    }
    class Book
    {

        public Book(int index, string title, string author, int yearOfWriting, string genre)
        {
            Index = index;
            Title = title;
            Author = author;
            YearOfWriting = yearOfWriting;
            Genre = genre;
        }

        public int Index { get; private set; }
        public string Title { get; private set; }
        public string Author { get; private set; }
        public int YearOfWriting { get; private set; }
        public string Genre { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($"Номер: {Index} Название книги: {Title}, автор книги: {Author}, год выпуска: {YearOfWriting}, жанр: {Genre}");
        }
    }

    class Library
    {
        private List<Book> _books = new List<Book>();

        private readonly int _numberDifferences = 1;

        public void AddBook()
        {
            int _currentIndex = 0;

            Console.SetCursorPosition(0, 0);
            Console.WriteLine("Введите название книги: ");
            string title = Console.ReadLine();
            Console.WriteLine("Введите автора книги: ");
            string author = Console.ReadLine();
            int yearOfWriting = ReadInt("Введите год выпуска книги: \n");
            Console.WriteLine("Введите жанр книги: ");
            string genre = Console.ReadLine();

            _books.Add(new Book(_numberDifferences + _currentIndex++, title, author, yearOfWriting, genre));

            Console.WriteLine($"\nДобавлена книга под номером {_currentIndex}:\nНазвание: {title}  " +
                $"\nАвтор книги: {author}.\nГод выпуска: {yearOfWriting}\nЖанр книги: {genre}");

            WaitKeypress();

        }

        public void RemoveBook()
        {
            Console.SetCursorPosition(0, 0);

            if (_books.Count == 0)
            {
                Console.WriteLine("\nРепозиторий пуст.");
                WaitKeypress();
                return;
            }

            int indexToRemove = ReadInt("\nВведите номер книги, которую вы хотите удалить: ");

            int realIndex = indexToRemove - _numberDifferences;

            if (realIndex >= 0 && realIndex < _books.Count)
            {
                _books.RemoveAt(realIndex);
                Console.WriteLine($"\nКнига под номером {indexToRemove} удалена.");

                WaitKeypress();
            }
            else
            {
                Console.WriteLine("\nНекорректный номер книги.");

                WaitKeypress();
            }
        }

        public void SearchBookTitle()
        {
            Console.SetCursorPosition(0, 0);

            if (_books.Count <= 0)
            {
                Console.WriteLine("\nВ репозитории пока нет книг");

                WaitKeypress();
            }
            else
            {
                string userInput = InputText("\nВведите название книги: ");

                List<Book> searchBookTitle = new List<Book>();

                foreach (Book book in _books)
                {
                    if (book.Title.Contains(userInput, StringComparison.OrdinalIgnoreCase))
                    {
                        searchBookTitle.Add(book);
                    }
                }

                ShowBooks(searchBookTitle, "Список найденных книг по названию: ");
            }
        }

        public void SearchBookAuthor()
        {
            Console.SetCursorPosition(0, 0);

            if (_books.Count <= 0)
            {
                Console.WriteLine("В репозитории пока нет книг");

                WaitKeypress();
            }
            else
            {
                string userInput = InputText("\nВведите автора книги: ");

                List<Book> searchBookAuthor = new List<Book>();

                foreach (Book book in _books)
                {
                    if (book.Author.Contains(userInput, StringComparison.OrdinalIgnoreCase))
                    {
                        searchBookAuthor.Add(book);
                    }
                }

                ShowBooks(searchBookAuthor, "Список найденных книг по автору: ");
            }
        }

        public void SearchBookYear()
        {
            Console.SetCursorPosition(0, 0);

            if (_books.Count <= 0)
            {
                Console.WriteLine("\nВ репозитории пока нет книг");
            }
            else
            {
                string userInput = InputText("Введите год выпуска книги: ");

                List<Book> searchBookYear = new List<Book>();

                foreach (Book book in _books)
                {
                    if (userInput == book.YearOfWriting.ToString())
                    {
                        searchBookYear.Add(book);
                    }
                }

                ShowBooks(searchBookYear, "Список найденных книг по году выпуска: ");
            }
        }

        public void SearchBookGenre()
        {
            Console.SetCursorPosition(0, 0);

            if (_books.Count <= 0)
            {
                Console.WriteLine("\nВ репозитории пока нет книг");
            }
            else
            {
                string userInput = InputText("\nВведите жанр книги: ");

                List<Book> searchBookGenre = new List<Book>();

                foreach (Book book in _books)
                {
                    if (book.Genre.Contains(userInput, StringComparison.OrdinalIgnoreCase))
                    {
                        searchBookGenre.Add(book);
                    }
                }

                ShowBooks(searchBookGenre, "Список найденных книг по жанру: ");
            }
        }

        public void ShowAllBooks()
        {
            ShowBooks(_books, "Список всех книг в библиотеке: ");
        }

        private static int ReadInt(string message)
        {
            int number;
            Console.Write(message);

            while (int.TryParse(Console.ReadLine(), out number) == false)
            {
                Console.WriteLine("\nОшибка ввода! Введите число!");
                Console.Write(message);
            }

            return number;
        }

        private static void WaitKeypress()
        {
            Console.WriteLine("\nДля продолжениия нажмите кнопку...");
            Console.ReadKey();
            Console.Clear();
        }

        private static string InputText(string message)
        {
            Console.Write(message);
            string userText = Console.ReadLine();

            if (String.IsNullOrEmpty(userText))
            {
                userText = " ";
                return userText;
            }

            return userText;
        }

        private void ShowBooks(List<Book> books, string message)
        {
            Console.SetCursorPosition(0, 0);
            Console.WriteLine("\n" + message);

            if (books.Count <= 0)
            {
                Console.WriteLine("\nПо Вашему запросу в репозитории книг нет!");
            }
            else
            {
                Console.WriteLine($"\nВ репозитории находятся книги: {books.Count}");

                foreach (Book book in books)
                {
                    book.ShowInfo();
                }
            }

            WaitKeypress();
        }
    }
}
